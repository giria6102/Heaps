class maxheap{
  public:
  int arr[100];
  int size;
  maxheap(){
      arr[0]=-1;
      size=0;
  }
insertion:T(c)=O(logn)
  void insert(int value){
      size+=1;
      int index=size;
      arr[index]=value;
      while(index>1){
          int parent=index/2;
          if(arr[parent]<arr[index]){
              swap(arr[parent],arr[index]);
              index=parent;
          }
          else{
              return;
          }
      }
  }
  void print(){
      for(int i=1;i<=size;i++){
          cout<<arr[i]<<" ";
      }cout<<endl;
  }
// Deletion :T(c)=O(logn)
  void deleteheap(){
      if(size==0){
          cout<<"cannot be deleted"<<endl;
          return;
      }
      arr[1]=arr[size];
      size--;
      int i=1;
      while(i<size){
          int leftindex=2*i;
          int rightindex=2*i+1;
          if(leftindex<size&&arr[i]<arr[leftindex]){
              swap(arr[i],arr[leftindex]);
              i=leftindex;
          }
          else if(rightindex<size&&arr[i]<arr[rightindex]){
              swap(arr[i],arr[rightindex]);
              i=rightindex;
          }
          else{
              return;
          }
      }
  }
};

int main() {
   maxheap h;
   
   h.insert(50);
   h.insert(55);
   h.insert(53);
   h.insert(52);
   h.insert(54);
   h.print();
   h.deleteheap();
   h.print();
    return 0;
}
